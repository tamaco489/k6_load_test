openapi: 3.0.0
info:
  title: K6 Load Test API
  description: K6 Load Test API
  version: 1.0.0
servers:
  - url: http://localhost:{port}/jester/
    description: dev
    variables:
      port:
        default: '8080'
  - url: https://api.<domain-name>/jester/
    description: stg
security:
  - bearerAuth: []
paths:
  /healthcheck:
    get:
      tags:
        - healthcheck
      summary: Checks the health of API
      description: APIが正常に動作しているかを確認します。
      operationId: healthcheck
      responses:
        '200':
          description: API is up and running
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
      security: []
  /v1/users:
    post:
      tags:
        - v1
        - users
      summary: Create new user
      description: ユーザを新規作成します。
      operationId: createUser
      responses:
        '201':
          description: ユーザの新規登録が成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/me:
    get:
      tags:
        - v1
        - users
      summary: Get user information about myself
      description: 自身のユーザー情報を取得する
      operationId: getMe
      responses:
        '200':
          description: 自身のユーザ情報の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/profiles:
    post:
      tags:
        - v1
        - users/profiles
      summary: Create user profile
      description: ユーザのプロフィール情報を登録します。
      operationId: createProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          description: ユーザのプロフィール登録が成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/AlreadyExists'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v1/users/profiles/me:
    get:
      tags:
        - v1
        - users/profiles
      summary: Get profile information about myself
      description: 自身のプロフィール情報を取得する
      operationId: getProfileMe
      responses:
        '200':
          description: 自身のプロフィール情報の取得に成功しました。
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    HealthCheck:
      title: HealthCheck
      type: object
      description: HealthCheckのレスポンス
      required:
        - message
      properties:
        message:
          description: メッセージ。通常はok
          type: string
      example:
        message: ok
    CreateUserResponse:
      title: CreateUser
      type: object
      description: ユーザ新規登録APIのレスポンス
      required:
        - user_id
      properties:
        user_id:
          description: user_idを返却します。
          type: integer
          format: int64
      example:
        user_id: 10001001
    Me:
      type: object
      properties:
        user_id:
          description: 登録した自身のユーザーIDを返却
          type: integer
          format: int64
      required:
        - user_id
      example:
        user_id: 10001001
    Name:
      type: object
      required:
        - first_name
        - last_name
        - first_name_roman
        - last_name_roman
      properties:
        first_name:
          type: string
          description: ユーザーの名前
          example: 世一
        last_name:
          type: string
          description: ユーザーの姓
          example: 潔
        first_name_roman:
          type: string
          description: ユーザーの名前 (ローマ字表記)
          example: Yoichi
        last_name_roman:
          type: string
          description: ユーザーの姓 (ローマ字表記)
          example: Isagi
    Addresses:
      type: object
      required:
        - region
        - zip_code
        - prefecture
        - city
        - street
        - other
      properties:
        region:
          type: string
          description: 地域
          example: 関東
        zip_code:
          type: string
          pattern: ^\d{3}-\d{4}$
          description: ユーザーの郵便番号（XXX-XXXX形式）
          example: 150-8377
        prefecture:
          type: string
          description: 都道府県
          example: 東京都
        city:
          type: string
          description: 市区町村
          example: 渋谷区
        street:
          type: string
          description: 町域
          example: 宇田川町
        other:
          type: string
          description: その他住所
          example: 15番1号
    Profile:
      type: object
      required:
        - name
        - address
        - birthdate
        - image_url
      properties:
        name:
          description: 姓名に関する情報
          $ref: '#/components/schemas/Name'
        address:
          description: 住所に関する情報
          $ref: '#/components/schemas/Addresses'
        birthdate:
          type: string
          format: date
          description: ユーザーの生年月日（YYYY-MM-DD形式）
          example: '2000-01-01'
        image_url:
          type: string
          description: ユーザーのプロフィール画像のURL
          example: https://example
  responses:
    BadRequest:
      description: Bad Request
    Unauthorized:
      description: Unauthorized
    AlreadyExists:
      description: Already Exists
    InternalServerError:
      description: Internal Server Error
    NotFound:
      description: Not Found
    Forbidden:
      description: Forbidden
